try:
    from ctypes import LittleEndianStructure, \
        c_char, c_uint32, c_int32
    from enum import Enum
    import io
    import os
    import datetime

    sflag = int(0)

    class RescFuncError(Exception):
        pass

    {{rescsflag|indent}}
    # For Emergency Log Header
    class RescEmergLogHeader(LittleEndianStructure):
        _fields_ = (
            ('identify', c_char * 4),
            ('sflag', c_uint32),
            ('errlen', c_int32),
            ('datelen', c_int32),
        )

    # Source code file
    source_file = None

    def make_logdir():
        _logfile = {{ logfile }}
        os.makedirs(
            os.path.dirname(_logfile),
            exist_ok=True
        )

    def emergelog(header, err, date):
        with open(_logfile, "ab") as ef:
            ef.write(
                bytes(header),
                err.encode("utf-8"),
                date.encode("utf-8")
            )
        if source_file is not None:
            os.remove(source_file)
        sys.exit(1)
except Exception:
    # Can't ready emergency log
    import sys
    sys.exit(1)

try:
    import sys
    from resc import Resc, RescObject
{%- if ssh is defined and ssh != None -%}
    from resc import SSH
{%- endif %}
    from resc import RescLog, \
        RescLogFormat, RescLogOver
    from resc import RescLogSFlag
except ModuleNotFoundError as e:
    sflag |= (
        RescLogSFlag.EME.value["flag"] |
        RescLogSFlag.ERR.value["flag"] |
        RescLogSFlag.LOC.value["flag"] |
        RescLogSFlag.MNF.value["flag"]
    )
    date = str(datetime.datetime.now())
    header = RescEmergLogHeader(
        "resc",
        sflag,
        errlen=len(str(e)),
        datelen=len(date),
    )
    emergelog(
        header=header,
        error=str(e),
        date=date,
    )
except ImportError as e:
    sflag |= (
        RescLogSFlag.EME.value["flag"] |
        RescLogSFlag.ERR.value["flag"] |
        RescLogSFlag.LOC.value["flag"] |
        RescLogSFlag.IMP.value["flag"]
    )
    date = str(datetime.datetime.now())
    header = RescEmergLogHeader(
        identify="resc",
        sflag=sflag,
        errlen=len(str(e)),
        datelen=len(date)
    )
    emergelog(
        header=header,
        err=str(e),
        date=date
    )
except Exception as e:
    sflag |= (
        RescLogSFlag.EME.value["flag"] |
        RescLogSFlag.ERR.value["flag"] |
        RescLogSFlag.LOC.value["flag"]
    )
    date = str(datetime.datetime.now())
    header = RescEmergLogHeader(
        identify="resc",
        sflag=sflag,
        errlen=len(str(e)),
        datelen=len(date)
    )
    emergelog(
        header=header,
        err=str(e),
        date=date
    )

try:
    resc = Resc(
        cpu={{ resc_cpu }},
        memory={{ resc_mem }},
        disk={{ resc_disk }}
    )
except Exception as e:
    sflag |= (
        RescLogSFlag.EME.value["flag"] |
        RescLogSFlag.ERR.value["flag"] |
        RescLogSFlag.LOC.value["flag"] |
        RescLogSFlag.DEF.value["flag"]
    )
    date = str(datetime.datetime.now())
    header = RescEmergLogHeader(
        identify="resc",
        sflag=sflag,
        errlen=len(str(e)),
        datelen=len(date)
    )
    emergelog(
        header=header,
        err=str(e),
        date=date
    )

try:
    resclog = RescLog(
        {%- if logfile is defined and logfile != None %}
        logfile={{ logfile }},
        {%- endif %}
        {%- if logformat is defined and logformat != None %}
        format={{ logformat }},
        {%- endif %}
    )
    {%- for var in logvars %}
    {{ var }}
    {%- endfor %}
except Exception as e:
    sflag |= (
        RescLogSFlag.EME.value["flag"] |
        RescLogSFlag.ERR.value["flag"] |
        RescLogSFlag.LOC.value["flag"] |
        RescLogSFlag.DEF.value["flag"]
    )
    date = str(datetime.datetime.now())
    header = RescEmergLogHeader(
        identify="resc",
        sflag=sflag,
        errlen=len(str(e)),
        datelen=len(date)
    )
    emergelog(
        header=header,
        err=str(e),
        date=date
    )

{% block func_make %}
{% endblock %}

try:
{% if ssh is defined and ssh != None %}
    ssh = SSH(
        ip="{{ ssh.ip }}",
        username="{{ ssh.username }}",
{%- if ssh.key_filename is defined and ssh.key_filename != None %}
        key_filename="{{ ssh.key_filename }}",
{% else %}
        password="{{ ssh.password }}",
{%- endif %}
        timeout={{ ssh.timeout }},
        )
{% else %}
    ...
{% endif %}
except Exception as e:
    sflag |= (
        RescLogSFlag.ERR.value["flag"] |
        RescLogSFlag.REM.value["flag"] |
        RescLogSFlag.SSH.value["flag"]
    )
    resclog.stderr = str(e).encode("utf-8")
    resclog.write(
        RescLogOver.FALSE,
        sflag
    )


def call_definedsource(resclog):
    old_syspath = sys.path
    sys.path = [
{%- for path in syspath %}
        "{{ path }}",
{%- endfor %}
    ]

    err = 0
    old_stdout = sys.stdout
    old_stderr = sys.stderr
    try:
        func_stdout = io.StringIO()
        func_stderr = io.StringIO()
        sys.stdout = func_stdout
        sys.stderr = func_stderr
        {% block code %}
        {% endblock %}
        resclog.stdout = \
            sys.stdout.getvalue().encode("utf-8")
        resclog.stderr = \
            sys.stderr.getvalue().encode("utf-8")
    except RescFuncError as e:
        resclog.stderr = str(e).encode("utf-8")
        err |= RescLogSFlag.FUN.value["flag"]
    except Exception as e:
        resclog.stderr = str(e).encode("utf-8")
        err |= RescLogSFlag.FUN.value["flag"]
    finally:
        sys.stdout = old_stdout
        sys.stderr = old_stderr
        sys.path = old_syspath
        return err


def limit_update():
    return RescObject.limit_update(
        hash_value="{{ object_hash }}",
        dump_filepath="{{ jfile }}",
    )


{% if ssh is defined and ssh != None %}

{% if reverse == True %}
sflag |= RescLogSFlag.RVS
{% endif %}
try:
    {% if reverse == False -%}
    if resc.over_one_ssh(ssh, resclog):
    {%- else -%}
    if not resc.over_one_ssh(ssh, resclog):
    {% endif %}
        if limit_update():
            err = call_definedsource(resclog)
            resclog.write(RescLogOver.TRUE, sflag)
    else:
        resclog.write(RescLogOver.FALSE, sflag)
except Exception as e:
    sflag |= (
        RescLogSFlag.ERR.value["flag"] |
        RescLogSFlag.REM.value["flag"]
    )
    resclog.stderr = str(e).encode("utf-8")
    resclog.write(RescLogOver.FALSE, sflag)
{% else %}
try:
    {% if reverse == False -%}
    if resc.over_one:
    {%- else -%}
    if not resc.over_one:
    {% endif %}
        if limit_update():
            err = call_definedsource(resclog)
            resclog.write(RescLogOver.TRUE, sflag)
    else:
        resclog.write(RescLogOver.FALSE, sflag)
except Exception as e:
    sflag |= (
        RescLogSFlag.ERR.value["flag"] |
        RescLogSFlag.LOC.value["flag"]
    )
    resclog.stderr = str(e).encode("utf-8")
    resclog.write(RescLogOver.FALSE, sflag)
{%- endif %}

if source_file is not None:
    os.remove(source_file)


