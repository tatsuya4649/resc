{% extends "resc.j2" %}
{% block func_make %}
try:
    with open("{{ sourcefile }}", "wb") as sf:
        sf.write({{sourcebyte}})
    import_str = (
        'from ',
        '%s ' %
        (
            os.
            path.
            basename(
                "{{ sourcefile }}"
            ).
            split(".")[0]
        ),
        'import {{ defname }}'
    )
    exec(
        "".join(import_str)
    )
    source_file = "{{ sourcefile }}"
except IndentationError as e:
    sflag |= (
        RescLogSFlag.EME.value["flag"] |
        RescLogSFlag.ERR.value["flag"] |
        RescLogSFlag.LOC.valul["flag"] |
        RescLogSFlag.IMP.value["flag"] |
        RescLogSFlag.FUN.value["flag"] |
        RescLogSFlag.IND.value["flag"]
    )
    date = str(datetime.datetime.now())
    header = RescEmergLogHeader(
        identify="resc",
        sflag=sflag,
        errlen=len(str(e)),
        datelen=len(date)
    )
    emergelog(
        header=header,
        err=str(e),
        date=date,
    )
except Exception as e:
    sflag |= (
        RescLogSFlag.EME.value["flag"] |
        RescLogSFlag.ERR.value["flag"] |
        RescLogSFlag.LOC.value["flag"] |
        RescLogSFlag.IMP.value["flag"] |
        RescLogSFlag.FUN.value["flag"]
    )
    date = str(datetime.datetime.now())
    header = RescEmergLogHeader(
        identify="resc",
        sflag=sflag,
        errlen=len(str(e)),
        datelen=len(date)
    )
    emergelog(
        header=header,
        err=str(e),
        date=date,
    )
{% endblock %}
{% block code %}
        {{ func }}
{% endblock %}